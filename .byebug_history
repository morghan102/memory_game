c
Game
@board
c
@current_player
c
@players[0]
@current_player
@players
c
n
val.nil?
val
n
@num_wins
n
name
@name
q
@players
c
@current_guess
n
@previous_guess
n
@board[pos]
@board
@board.reveal(pos)
c
n
s
c
@previous_guess
@current_guess
n
s
n
@board.grid
@board.grid[pos[0]][pos[1]]
n
c
@board.grid[0][0]
@board.grid[0,0]
@board.grid
@board.cards
@board
pos
n
(@board.cards.count { |card| !card.facedown })
(@board.cards.count { |card| !card.facedown }).odd?
n
c
n
c
n
s
c
s
c
n
@grid[pos[0]][pos[1]] = true
@grid[pos[0]][pos[1]]
s
c
n
c
load "game.rb"
@grid[pos[0]][pos[1]]
@grid[pos]
self[pos[0]][pos[1]]
s
c
self[pos] = true
s
self[pos]
s
c
n
c
@grid[pos]
self[0,0]
pos
self[pos]
self
s
c
self
self[pos]
self[pos[0]][pos[1]]
pos
s
c
n
self[pos]
self
pos
s
c
@grid[pos]
pos
s
c
@grid[pos]
pos
s
pos
c
(@board.cards.count { |card| !card.facedown }).odd?
card.facedown
card
s
c
n
card
s
card
c
n
card
s
card
c
card
s
c
card
arr
s
c
n
c
n
c
@previous_guess
n
@board.cards.any? { |card| !card.facedown }
n
c
n
s
@board.cards.include? { |card| !card.facedown }
@board.cards
n
c
@cards
@crads
@cards.include? { |card| !card.facedown }
n
q
@previous_guess
n
pos
@previous_guess
q
n
val
@cards
n
@cards
n
@cards
n
val
val[0]
q
c
@cards
n
val
n
@cards[-1].value
@cards[-1]
@cards
n
val
c
@previous_guess
pos
c
n
pos
c
pos
c
pos.to_1
@grid[pos]
pos
c
@grid.[](pos)
pos
c
@grid[pos]
pos
@grid[1][1]
@grid[1]
@grid
c
p @cards
@cards[1]
@cards[1][1]
@cards[1,1]
@cards[pos]
pos
@cards
c
@cards[guessed_pos]
guessed_pos
n
s
pos
q
guessed_pos
n
guessed_pos
pos
s
q
pos
n
char
n
char != " "
char
n
char
s
pos
s
pos
q
@cards[guessed_pos.to_i]
@cards[guessed_pos.to_s]
@cards[guessed_pos.flatten]
@cards[0,1]
@cards[guessed_pos]
guessed_pos
guessed pos
s
pos
c
@board.size <= arr[2]
@board.size <= arr[0]
@board.size
arr.length > 2
n
char != " "
n
char.to_i
char == 0
char == ""
char == " "
s
display char
pos
n
display arr
