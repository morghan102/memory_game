c
(@board.cards.count { |card| !card.facedown }).odd?
card.facedown
card
s
c
n
card
s
card
c
n
card
s
card
c
card
s
c
card
arr
s
c
n
c
n
c
@previous_guess
n
@board.cards.any? { |card| !card.facedown }
n
c
n
s
@board.cards.include? { |card| !card.facedown }
@board.cards
n
c
@cards
@crads
@cards.include? { |card| !card.facedown }
n
q
@previous_guess
n
pos
@previous_guess
q
n
val
@cards
n
@cards
n
@cards
n
val
val[0]
q
c
@cards
n
val
n
@cards[-1].value
@cards[-1]
@cards
n
val
c
@previous_guess
pos
c
n
pos
c
pos
c
pos.to_1
@grid[pos]
pos
c
@grid.[](pos)
pos
c
@grid[pos]
pos
@grid[1][1]
@grid[1]
@grid
c
p @cards
@cards[1]
@cards[1][1]
@cards[1,1]
@cards[pos]
pos
@cards
c
@cards[guessed_pos]
guessed_pos
n
s
pos
q
guessed_pos
n
guessed_pos
pos
s
q
pos
n
char
n
char != " "
char
n
char
s
pos
s
pos
q
@cards[guessed_pos.to_i]
@cards[guessed_pos.to_s]
@cards[guessed_pos.flatten]
@cards[0,1]
@cards[guessed_pos]
guessed_pos
guessed pos
s
pos
c
@board.size <= arr[2]
@board.size <= arr[0]
@board.size
arr.length > 2
n
char != " "
n
char.to_i
char == 0
char == ""
char == " "
s
display char
pos
n
display arr
c
exit
s
pos
s
row
s
row
exit
n
pos.value
pos
s
pos
row
s
exit
arr
c
v
c
n
card
print big_arr
big_arr.length
n
big_arr.length
n
big_arr.length
n
big_arr.length
n
big_arr.length
n
big_arr.length
n
big_arr.length
n
big_arr.length
arr.length
n
arr.length
n
arr.length
n
arr.length
n
display card
card
s
@size
display big_arr
display arr
@grid
c
s
n
display i
s
display @grid[i]
display card
c
n
nn
n
display @grid[i]
n
@grid[i]
n
s
c
n
s
n
@grid.length
n
display i
s
@cards
c
n
@grid
n
s
display card
s
@cards.each do |card| p card.value end
@cards.each do |card| p card end
@cards.each do |card|
@cards.value
@cards
s
display row
q
c
q
@grid
@grid[rand][rand]
n
@grid[rand][rand]
s
@grid
display card
card
q
row
